Day01 
    一. JS概述
        １．JS介绍
            类型:解释型语言(解释器:浏览器)
            作用:用来实现网页动态效果，用户交互及前后端数据传输
        ２．ＪＳ组成
            ．．．．

    二. 使用方式
        1. 元素绑定事件
            1). 事件: 用户不同操作行为
            2). 事件处理:　辅助线程记录事件即处理函数,并监听事件,事件发生, 自动处理
            3). 常用事件：　ｏｎｃｌｉｋ
        
        2. 文档内嵌
            ...

       3. 外部链接
            创建外部JS文件 ,引入文件的代码会将script内代码覆盖, 所以文档内嵌与外部链接方法二选一(不能在一个script标签中使用两种方法)
    
二. 基础语法
    1. 语法规范
        分号可以作为语句结束标志, 也可以省略
        JS 严格区分大小写

    2. JS的变量与常亮
        1). 变量
            a. 使用 var 声明, 自定义变量名 
                注意: 注意变量与等号的关系;
                eg. var a, b = 10;
                    a = undifined; b = 10.
        2). 常亮
             注意: 
                常亮一经定义, 不能修改, 强制修改会报错
                常亮命名采用全大写字母
                少用

三. 数据类型
    1. 基本数据类型(简单数据类型)
        1). number(数值类型)
            特点: 不分整数与小数

        2). string 字符串类型
            字符串拼接  `${表达式}` 类似于f的占位符

        3). boolean 布尔类型
            特点: 关键字为 true false (首字母小写)
        
        4). undefined 程序返回值
            变量声明未赋值显示 undefined

        5). null 空类型
            解除对象引用使用null, 表示对象为空

    2. 引用数据类型
        主要指对象, 函数

    3. 检测数据类型
        typeof 变量或者表达式
        typeof(变量或表达式)

四. 数据类型转换
    1. 强制类型转换
        1). 转换字符串类型
        数值直接转换时需要先加 空格 再加点
    
    2. 转换number类型
        1). Number(param)
            true->1 false->0  null->0 undifined->NaN

        2). parseInt(param)
            EG. parseInt("123.e") -> 123
            eg. parseFloat("123.1e") ->123

        3). parseFloat(param)
            eg. parseFloat("123.e") -> 123
            eg. parseFloat("123.1e") -> 123.1


五. 运算符
    1. 赋值运算符 
        pass
    2. 算术运算符
        pass
    3. 复合运算符 (Python中的增强运算符)
        pass
    4. (自增或自减运算符)
        ++ -- 在变量自身基础上+1 或者-1
        作用: 可以直接用于运算 如 var c = ++a + 1
        注意:
            注意自增/自减运算符在变量的哪一边.
            在左边时,说明变量已经执行完自增/自减运算
            右边时, 说明变量还未执行自增/自减运算, 下一次调用变量时, 完成操作
    
    5. 关系运算符/ 比较运算符
        === 全等  表示值一样并且数据类型一样
        1). 结果 boolean
        2). 使用:
            注意: a. 字符串比较与Python相同
                b.  一律将操作数转换为number进行数值比较，如果某一操作数无法转换number，则变成NaN参与比较运算，结果永远是false
                c. null和其他数据类型做等值(判断相等或者全等时, 称之为等值比较)比较运算 不转换成数字
                null和undefined相等 但是 null和undefined不全等

    6. 逻辑运算符
        && 逻辑与
        || 逻辑或
        !  逻辑非
        使用方法:
            利用短路逻辑可以做一些简单判断
            eg. 18>12 && alert("禁止访问") (一个为true, 程序向后执行, 弹出提示框)
                11>12 && alert("禁止访问") (第一个为false, 程序短路, 该句话运行结束)
    
    7. 三目运算符
        语法: 表达式1　? 表达式2　:　表达式３；
        过程 :
            判断表达式1是否成立,返回布尔值(表达式1 返回boolean类型);
            如果表达式1成立,执行表达式2;
            如果表达式1不成立,执行表达式3;